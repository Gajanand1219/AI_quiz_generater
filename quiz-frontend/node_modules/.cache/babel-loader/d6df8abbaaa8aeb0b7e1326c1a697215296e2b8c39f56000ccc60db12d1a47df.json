{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { jsPDF } from \"jspdf\";\n\n// const quizTypes = [\n//   { label: \"Multiple Choice\", value: \"mcq\" },\n//   { label: \"True / False\", value: \"tf\" },\n//   { label: \"Fill in the Blanks\", value: \"fib\" },\n// ];\n\n// export default function App() {\n//   const [step, setStep] = useState(\"home\");\n//   const [file, setFile] = useState(null);\n//   const [quizType, setQuizType] = useState(\"mcq\");\n//   const [quiz, setQuiz] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [success, setSuccess] = useState(false);\n\n//   const handleStart = () => setStep(\"upload\");\n// const [authStep, setAuthStep] = useState(\"login\"); // or \"register\"\n// const [username, setUsername] = useState(\"\");\n// const [password, setPassword] = useState(\"\");\n\nconst handleRegister = async () => {\n  const res = await fetch(\"http://localhost:8000/register\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const data = await res.json();\n  alert(data.message);\n  if (res.ok) setStep(\"home\");\n};\nconst handleLogin = async () => {\n  const formData = new URLSearchParams();\n  formData.append(\"username\", username);\n  formData.append(\"password\", password);\n  const res = await fetch(\"http://localhost:8000/login\", {\n    method: \"POST\",\n    body: formData\n  });\n  const data = await res.json();\n  alert(data.message);\n  if (res.ok) setStep(\"home\");\n};\n\n// const handleUpload = async () => {\n//   if (!file) {\n//     alert(\"Please select a file.\");\n//     return;\n//   }\n//   setLoading(true);\n\n//   const formData = new FormData();\n//   formData.append(\"file\", file);\n//   formData.append(\"quiz_type\", quizType);\n\n//   try {\n//     const res = await fetch(\"http://localhost:8000/generate-quiz\", {\n//       method: \"POST\",\n//       body: formData,\n//     });\n\n//     if (!res.ok) {\n//       const errorData = await res.json();\n//       throw new Error(errorData.detail || \"Failed to generate quiz\");\n//     }\n\n//     const data = await res.json();\n//     setQuiz(data.quiz);\n//     setStep(\"preview\");\n//   } catch (error) {\n//     alert(`Error: ${error.message}\\n\\nPlease check:\\n1. Is the backend running?\\n2. Did you upload a valid file?\\n3. Is your OpenAI API key set?`);\n//     console.error(\"Fetch error:\", error);\n//   } finally {\n//     setLoading(false);\n//   }\n// };\n\n//   const exportToPDF = () => {\n//     const doc = new jsPDF();\n//     let yPosition = 10;\n\n//     quiz.forEach((q, i) => {\n//       // Add question\n//       doc.text(`${i + 1}. ${q.question}`, 10, yPosition);\n//       yPosition += 10;\n\n//       // Add options if they exist\n//       if (q.options && q.options.length > 0) {\n//         q.options.forEach((opt, j) => {\n//           doc.text(`   ${String.fromCharCode(65 + j)}. ${opt}`, 15, yPosition);\n//           yPosition += 7;\n//         });\n//       }\n\n//       // Add correct answer\n//       doc.text(`Correct Answer: ${q.answer}`, 15, yPosition);\n//       yPosition += 15;\n\n//       // Add page break if needed\n//       if (yPosition > 280 && i < quiz.length - 1) {\n//         doc.addPage();\n//         yPosition = 10;\n//       }\n//     });\n\n//     doc.save(\"quiz.pdf\");\n//     setSuccess(true);\n//   };\n\n//   const handleCreateAnother = () => {\n//     setQuiz([]);\n//     setFile(null);\n//     setSuccess(false);\n//     setStep(\"upload\");\n//   };\n\n//   return (\n//     <div style={{ maxWidth: 600, margin: \"2rem auto\", fontFamily: \"Arial\" }}>\n//       {step === \"home\" && (\n//         <>\n//           <h1>AI-Powered Quiz Creator</h1>\n//           <p>Upload your lecture notes or textbook to instantly generate a quiz!</p>\n//           <button onClick={handleStart}>Start Now</button>\n//         </>\n//       )}\n\n//       {step === \"upload\" && (\n//         <>\n//           <h2>Upload Notes</h2>\n//           <input\n//             type=\"file\"\n//             accept=\".pdf,.docx,.txt\"\n//             onChange={(e) => setFile(e.target.files[0])}\n//           />\n//           <div style={{ margin: \"1rem 0\" }}>\n//             <label>\n//               Quiz Type:{\" \"}\n//               <select\n//                 value={quizType}\n//                 onChange={(e) => setQuizType(e.target.value)}\n//               >\n//                 {quizTypes.map((type) => (\n//                   <option key={type.value} value={type.value}>\n//                     {type.label}\n//                   </option>\n//                 ))}\n//               </select>\n//             </label>\n//           </div>\n//           <button onClick={handleUpload} disabled={loading}>\n//             {loading ? \"Generating Quiz...\" : \"Upload & Generate Quiz\"}\n//           </button>\n//           <button onClick={() => setStep(\"home\")} style={{ marginLeft: 10 }}>\n//             Cancel\n//           </button>\n//         </>\n//       )}\n\n//       {step === \"preview\" && (\n//         <>\n//           <h2>Quiz Preview</h2>\n//           {quiz.map((q, idx) => (\n//             <div\n//               key={idx}\n//               style={{ border: \"1px solid #ccc\", padding: 10, marginBottom: 10 }}\n//             >\n//               <p>\n//                 <strong>Question {idx + 1}:</strong>{\" \"}\n//                 <input\n//                   type=\"text\"\n//                   value={q.question}\n//                   onChange={(e) => {\n//                     const newQuiz = [...quiz];\n//                     newQuiz[idx].question = e.target.value;\n//                     setQuiz(newQuiz);\n//                   }}\n//                   style={{ width: \"100%\" }}\n//                 />\n//               </p>\n\n//               {q.options && q.options.length > 0 && (\n//                 <ul>\n//                   {q.options.map((opt, i) => (\n//                     <li key={i}>\n//                       <input\n//                         type=\"text\"\n//                         value={opt}\n//                         onChange={(e) => {\n//                           const newQuiz = [...quiz];\n//                           newQuiz[idx].options[i] = e.target.value;\n//                           setQuiz(newQuiz);\n//                         }}\n//                       />\n//                     </li>\n//                   ))}\n//                 </ul>\n//               )}\n\n//               <p>\n//                 Correct Answer:{\" \"}\n//                 {q.options && q.options.length > 0 ? (\n//                   <select\n//                     value={q.answer}\n//                     onChange={(e) => {\n//                       const newQuiz = [...quiz];\n//                       newQuiz[idx].answer = e.target.value;\n//                       setQuiz(newQuiz);\n//                     }}\n//                   >\n//                     {q.options.map((opt, i) => (\n//                       <option key={i} value={opt}>\n//                         {opt}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 ) : (\n//                   <input\n//                     type=\"text\"\n//                     value={q.answer}\n//                     onChange={(e) => {\n//                       const newQuiz = [...quiz];\n//                       newQuiz[idx].answer = e.target.value;\n//                       setQuiz(newQuiz);\n//                     }}\n//                   />\n//                 )}\n//               </p>\n//             </div>\n//           ))}\n\n//           {!success && (\n//             <>\n//               <button onClick={exportToPDF}>Export to PDF</button>\n//               <button onClick={handleCreateAnother} style={{ marginLeft: 10 }}>\n//                 Create Another Quiz\n//               </button>\n//             </>\n//           )}\n\n//           {success && (\n//             <>\n//               <p>ðŸŽ‰ Your quiz has been exported as PDF!</p>\n//               <button onClick={() => setStep(\"home\")}>Go to Homepage</button>\n//             </>\n//           )}\n//         </>\n//       )}\n//     </div>\n//   );\n// }","map":{"version":3,"names":["handleRegister","res","fetch","method","headers","body","JSON","stringify","username","password","data","json","alert","message","ok","setStep","handleLogin","formData","URLSearchParams","append"],"sources":["C:/Users/deshm/OneDrive/Desktop/quiz/quiz/quiz-frontend/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { jsPDF } from \"jspdf\";\n\n// const quizTypes = [\n//   { label: \"Multiple Choice\", value: \"mcq\" },\n//   { label: \"True / False\", value: \"tf\" },\n//   { label: \"Fill in the Blanks\", value: \"fib\" },\n// ];\n\n// export default function App() {\n//   const [step, setStep] = useState(\"home\");\n//   const [file, setFile] = useState(null);\n//   const [quizType, setQuizType] = useState(\"mcq\");\n//   const [quiz, setQuiz] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [success, setSuccess] = useState(false);\n\n//   const handleStart = () => setStep(\"upload\");\n// const [authStep, setAuthStep] = useState(\"login\"); // or \"register\"\n// const [username, setUsername] = useState(\"\");\n// const [password, setPassword] = useState(\"\");\n\n\n\n\nconst handleRegister = async () => {\n  const res = await fetch(\"http://localhost:8000/register\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password }),\n  });\n  const data = await res.json();\n  alert(data.message);\n  if (res.ok) setStep(\"home\");\n};\n\nconst handleLogin = async () => {\n  const formData = new URLSearchParams();\n  formData.append(\"username\", username);\n  formData.append(\"password\", password);\n\n  const res = await fetch(\"http://localhost:8000/login\", {\n    method: \"POST\",\n    body: formData,\n  });\n  const data = await res.json();\n  alert(data.message);\n  if (res.ok) setStep(\"home\");\n};\n\n\n\n// const handleUpload = async () => {\n//   if (!file) {\n//     alert(\"Please select a file.\");\n//     return;\n//   }\n//   setLoading(true);\n\n//   const formData = new FormData();\n//   formData.append(\"file\", file);\n//   formData.append(\"quiz_type\", quizType);\n\n//   try {\n//     const res = await fetch(\"http://localhost:8000/generate-quiz\", {\n//       method: \"POST\",\n//       body: formData,\n//     });\n    \n//     if (!res.ok) {\n//       const errorData = await res.json();\n//       throw new Error(errorData.detail || \"Failed to generate quiz\");\n//     }\n    \n//     const data = await res.json();\n//     setQuiz(data.quiz);\n//     setStep(\"preview\");\n//   } catch (error) {\n//     alert(`Error: ${error.message}\\n\\nPlease check:\\n1. Is the backend running?\\n2. Did you upload a valid file?\\n3. Is your OpenAI API key set?`);\n//     console.error(\"Fetch error:\", error);\n//   } finally {\n//     setLoading(false);\n//   }\n// };\n\n//   const exportToPDF = () => {\n//     const doc = new jsPDF();\n//     let yPosition = 10;\n    \n//     quiz.forEach((q, i) => {\n//       // Add question\n//       doc.text(`${i + 1}. ${q.question}`, 10, yPosition);\n//       yPosition += 10;\n      \n//       // Add options if they exist\n//       if (q.options && q.options.length > 0) {\n//         q.options.forEach((opt, j) => {\n//           doc.text(`   ${String.fromCharCode(65 + j)}. ${opt}`, 15, yPosition);\n//           yPosition += 7;\n//         });\n//       }\n      \n//       // Add correct answer\n//       doc.text(`Correct Answer: ${q.answer}`, 15, yPosition);\n//       yPosition += 15;\n      \n//       // Add page break if needed\n//       if (yPosition > 280 && i < quiz.length - 1) {\n//         doc.addPage();\n//         yPosition = 10;\n//       }\n//     });\n    \n//     doc.save(\"quiz.pdf\");\n//     setSuccess(true);\n//   };\n\n//   const handleCreateAnother = () => {\n//     setQuiz([]);\n//     setFile(null);\n//     setSuccess(false);\n//     setStep(\"upload\");\n//   };\n\n//   return (\n//     <div style={{ maxWidth: 600, margin: \"2rem auto\", fontFamily: \"Arial\" }}>\n//       {step === \"home\" && (\n//         <>\n//           <h1>AI-Powered Quiz Creator</h1>\n//           <p>Upload your lecture notes or textbook to instantly generate a quiz!</p>\n//           <button onClick={handleStart}>Start Now</button>\n//         </>\n//       )}\n\n//       {step === \"upload\" && (\n//         <>\n//           <h2>Upload Notes</h2>\n//           <input\n//             type=\"file\"\n//             accept=\".pdf,.docx,.txt\"\n//             onChange={(e) => setFile(e.target.files[0])}\n//           />\n//           <div style={{ margin: \"1rem 0\" }}>\n//             <label>\n//               Quiz Type:{\" \"}\n//               <select\n//                 value={quizType}\n//                 onChange={(e) => setQuizType(e.target.value)}\n//               >\n//                 {quizTypes.map((type) => (\n//                   <option key={type.value} value={type.value}>\n//                     {type.label}\n//                   </option>\n//                 ))}\n//               </select>\n//             </label>\n//           </div>\n//           <button onClick={handleUpload} disabled={loading}>\n//             {loading ? \"Generating Quiz...\" : \"Upload & Generate Quiz\"}\n//           </button>\n//           <button onClick={() => setStep(\"home\")} style={{ marginLeft: 10 }}>\n//             Cancel\n//           </button>\n//         </>\n//       )}\n\n//       {step === \"preview\" && (\n//         <>\n//           <h2>Quiz Preview</h2>\n//           {quiz.map((q, idx) => (\n//             <div\n//               key={idx}\n//               style={{ border: \"1px solid #ccc\", padding: 10, marginBottom: 10 }}\n//             >\n//               <p>\n//                 <strong>Question {idx + 1}:</strong>{\" \"}\n//                 <input\n//                   type=\"text\"\n//                   value={q.question}\n//                   onChange={(e) => {\n//                     const newQuiz = [...quiz];\n//                     newQuiz[idx].question = e.target.value;\n//                     setQuiz(newQuiz);\n//                   }}\n//                   style={{ width: \"100%\" }}\n//                 />\n//               </p>\n              \n//               {q.options && q.options.length > 0 && (\n//                 <ul>\n//                   {q.options.map((opt, i) => (\n//                     <li key={i}>\n//                       <input\n//                         type=\"text\"\n//                         value={opt}\n//                         onChange={(e) => {\n//                           const newQuiz = [...quiz];\n//                           newQuiz[idx].options[i] = e.target.value;\n//                           setQuiz(newQuiz);\n//                         }}\n//                       />\n//                     </li>\n//                   ))}\n//                 </ul>\n//               )}\n              \n//               <p>\n//                 Correct Answer:{\" \"}\n//                 {q.options && q.options.length > 0 ? (\n//                   <select\n//                     value={q.answer}\n//                     onChange={(e) => {\n//                       const newQuiz = [...quiz];\n//                       newQuiz[idx].answer = e.target.value;\n//                       setQuiz(newQuiz);\n//                     }}\n//                   >\n//                     {q.options.map((opt, i) => (\n//                       <option key={i} value={opt}>\n//                         {opt}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 ) : (\n//                   <input\n//                     type=\"text\"\n//                     value={q.answer}\n//                     onChange={(e) => {\n//                       const newQuiz = [...quiz];\n//                       newQuiz[idx].answer = e.target.value;\n//                       setQuiz(newQuiz);\n//                     }}\n//                   />\n//                 )}\n//               </p>\n//             </div>\n//           ))}\n\n//           {!success && (\n//             <>\n//               <button onClick={exportToPDF}>Export to PDF</button>\n//               <button onClick={handleCreateAnother} style={{ marginLeft: 10 }}>\n//                 Create Another Quiz\n//               </button>\n//             </>\n//           )}\n\n//           {success && (\n//             <>\n//               <p>ðŸŽ‰ Your quiz has been exported as PDF!</p>\n//               <button onClick={() => setStep(\"home\")}>Go to Homepage</button>\n//             </>\n//           )}\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKA,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;IACxDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;EAC7BC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EACnB,IAAIZ,GAAG,CAACa,EAAE,EAAEC,OAAO,CAAC,MAAM,CAAC;AAC7B,CAAC;AAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,QAAQ,GAAG,IAAIC,eAAe,CAAC,CAAC;EACtCD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEX,QAAQ,CAAC;EACrCS,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEV,QAAQ,CAAC;EAErC,MAAMR,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACrDC,MAAM,EAAE,MAAM;IACdE,IAAI,EAAEY;EACR,CAAC,CAAC;EACF,MAAMP,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;EAC7BC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EACnB,IAAIZ,GAAG,CAACa,EAAE,EAAEC,OAAO,CAAC,MAAM,CAAC;AAC7B,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}